---

- name: Create EVERSCALE group
  group:
    name: "{{ ever_node_group }}"
    state: present

- name: Create EVERSCALE user
  user:
    name: "{{ ever_node_user }}"
    comment: "EVERSCALE node user"
    group: "{{ ever_node_group }}"
    shell: /bin/bash
    state: present
  register: ever_user_created

- name: Set home directory variable
  set_fact:
    ever_node_user_home: "{{ ever_user_created.home }}"

- name: Create dirs
  file:
    path: "{{ ever_node_work_dir }}"
    state: directory
    mode: u=rwx,g=rx,o=
    owner: "{{ ever_node_user }}"
    group: "{{ ever_node_group }}"
  when: not additional_disk_mounted

- name: Create dirs (if used additional disk)
  file:
    path: "{{ additional_mount }}"
    state: directory
    mode: u=rwx,g=rx,o=
    owner: "{{ ever_node_user }}"
    group: "{{ ever_node_group }}"
  when: additional_disk_mounted and ever_user_created

- name: Create symbolic link (if used additional disk)
  file:
    src: "{{ additional_mount }}"
    dest: "{{ ever_node_work_dir }}"
    state: link
  when: additional_disk_mounted and ever_user_created

- name: Set timezone to "{{ timezone }}"
  timezone:
    name: "{{ timezone }}"
  when: timezone is defined and timezone | length > 0

- name: Include os specific tasks
  include_tasks: "{{ ansible_pkg_mgr }}.yml"

- name: Upgrade pip package
  pip:
    name:
      - pip
    state: latest
  vars:
    ansible_python_interpreter: python3

- name: Install python packages
  pip:
    name:
      - jmespath
    state: latest
  vars:
    ansible_python_interpreter: python3

- name: Linux PAM limits | add or modify nofile limits
  pam_limits:
    domain: "{{ ever_node_user }}"
    limit_type: "{{ item.limit_type }}"
    limit_item: "{{ item.limit_item }}"
    value: "{{ item.value }}"
  loop:
    - {limit_type: 'soft', limit_item: 'nofile', value: "{{ soft_nofile }}"}
    - {limit_type: 'hard', limit_item: 'nofile', value: "{{ hard_nofile }}"}
    - {limit_type: 'soft', limit_item: 'nproc', value: "{{ soft_nproc }}"}
    - {limit_type: 'hard', limit_item: 'nproc', value: "{{ hard_nproc }}"}
    - {limit_type: '-', limit_item: 'memlock', value: "{{ memlock }}"}
  when: set_limits is defined and set_limits|bool

- name: Create systemd service "disable-transparent-huge-pages.service"
  copy:
    src: 'disable-transparent-huge-pages.service'
    dest: /etc/systemd/system/disable-transparent-huge-pages.service
  notify: "restart disable-thp"
  when: disable_thp is defined and disable_thp|bool

- name: Setting kernel parameters
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_set: true
    state: present
    sysctl_file: "/etc/sysctl.d/99-everscale.conf"
    reload: true
  loop: "{{ sysctl_conf.ever_node | list | unique }}"
  ignore_errors: true
  when: sysctl_set|bool and sysctl_conf | length > 0


- name: icinga to sudoers
  block:
    - name: Set SELinux in permissive mode until the machine is rebooted
      command: setenforce 0
      ignore_errors: true
      changed_when: false

    - name: check sudoers file for icinga user
      stat:
        path: /etc/sudoers.d/icinga
      register: stat_result

    - name: create sudoers file for icinga if file not exist
      file:
        path: /etc/sudoers.d/icinga
        state: touch
      when: not stat_result.stat.exists

    - name: add icinga to sudoers
      lineinfile:
        path: /etc/sudoers.d/icinga
        state: present
        line: 'icinga ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'
  when: add_icinga_to_sudoers and use_icinga

- name: when icinga not in sudoers
  block:
    - name: add icinga to {{ ever_node_group  }}
      user: name={{ icinga }}
            group={{ ever_node_group }}
            append=yes

    - name: execute bit for group to validator directory
      ansible.builtin.file:
        path: "{{ ever_node_user_home }}"
        owner: "{{ ever_node_user }}"
        group: "{{ ever_node_group }}"
        mode: '0750'

    - name: execute bit for group to keys directory
      ansible.builtin.file:
        path: "{{ ever_node_keys }}/*"
        owner: "{{ ever_node_user }}"
        group: "{{ ever_node_group }}"
        mode: g+r
  when: not add_icinga_to_sudoers and use_icinga

- name: back compat
  ansible.builtin.file:
    src: "{{ ever_node_user_home }}/ton-env.sh"
    dest: "{{ ever_node_user_home }}/ever-env.sh"
    owner: "{{ ever_node_user }}"
    group: "{{ ever_node_group }}"
    state: link
  when: use_icinga
